---
description:
globs:
alwaysApply: false
---

# API Endpoints and their respective purpose

## Specs

- Current API version: `v1`

## Important

- This laravel project will be used by our frontend service (built with NextJS) for the student facing and admin facing sites
- The auth system should be single session (only one device can log in at a time, other device should be automatically logged out when the user logs in with another device)
- Adhere to the API versioning. You need to create the API route group (if it does not exist yet). All the API routes should be listed under that version group
- The student and admin logs in only using OTP method

## Endpoints and Purposes

### Auth

This endpoint is shared. Can be used by Students and Admins

- POST `/auth/request-otp` -> Request OTP code
- POST `/auth/verify-otp` -> Verify OTP code
- POST `/auth/resend-otp` -> Resend OTP code
- POST `/auth/logout` -> Logout
- POST `/auth/refresh-session` -> Refresh token endpoint, keeping the user logged in

### Student Facing Site APIs

Listed under: `/api/v1` group

Here are the list:

### Student Course Categories

- GET `/categories` -> Get course categories
- GET `/categories/${slug}` -> Get course category by slug

### Student Courses

- GET `/courses` -> Get courses
- GET `/courses/${slug}` -> Get course by slug
- GET `/courses/categories/${slug}` -> Get courses within specific category by slug
- POST `/courses/${slug}/enroll` -> Enroll specific course
- GET `/courses/${slug}/progress` -> Get the course progress (includes the module and lesson progress)
- POST `/courses/${slug}/progress` -> Update the course progress (includes the module and lesson progress)

------------------------
------------------------
------------------------
------------------------

### Admin Facing Site APIs

Listed under: `/api/v1/admin` group

Here are the list:

### Admin Course Categories

- GET `/categories` -> Get course categories
- POST `/categories` -> Create new course category
- GET `/categories/${slug}` -> Get course category by slug
- PUT `/categories/${slug}` -> Update course category
- DELETE `/categories/${slug}` -> DELETE course category by id

### Admin Courses

- GET `/courses` -> Get course categories
- POST `/courses` -> Create new course
- GET `/courses/${slug}` -> Get course by slug
- PUT `/courses/${slug}` -> Update course
- DELETE `/courses/${slug}` -> DELETE course id

## Writing endpoints and their logics

Remember, this project is an API project. A NextJS project will consume these APIs. With this project structure, you typically have to:

- Based on the product requirements, there are not API endpoints that could be called by non-login user yet, except the auth
- Define the API route at the `routes/api.php`. If it's a new group you have to define a new route group using the `::prefix()`
- Make sure to guard the group with at least the `auth:api` middleware
- `/v1/auth` is for Student and Admin. `/v1` group is for Student. `/v1/admin` group if for Admin.
- Each route endpoint/uri should have an action that is defined on their respective Controller.
- Keep the Controllers lean by implementing `Services` and `Repositories`
  - Controllers calls the `Services`, process them and return API response
  - `Services` contains the business logic. Each function in the service should return value.
  - `Repositories` contains the DB level logic (queries and mutations).
    - Prefer using Eloquent whenever possible. Make sure it is optimized.
